<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>golang併發</title>
      <link href="/2022/12/30/golang%E4%BD%B5%E7%99%BC/"/>
      <url>/2022/12/30/golang%E4%BD%B5%E7%99%BC/</url>
      
        <content type="html"><![CDATA[<h1 id="併發"><a href="#併發" class="headerlink" title="併發"></a>併發</h1><h3 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)<br><span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++&#123;<br>c &lt;- i<br>fmt.Println(c)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>先設定一個無緩衝通道，使用for迴圈將值丟入通道中</p><p>有趣的是，因為通道處於無緩存狀態，當值直接丟入時阻塞沒辦法存buffer中獲得，因此panic</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>,<span class="hljs-number">4</span>)<br><span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++&#123;<br>c &lt;- i<br>fmt.Println(c)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>設定緩衝為4，當輸入5個數值時，由於預設的buffer只有4個內容可存放</p><p>所以只能輸入四個值，第五個會panic</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">hello</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;Hello&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;Start&quot;</span>)<br><span class="hljs-keyword">go</span> hello()<br>  <span class="hljs-comment">// time.Sleep(time.Second) 等待一秒</span><br>fmt.Println(<span class="hljs-string">&quot;End&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>為什麼輸出會只有Start和End而沒有Hello?</p><p>因為當main結束時所有Goroutine都會關閉，因此需要加入等待時間</p></li></ul><h3 id="使用gorutine取值知識點"><a href="#使用gorutine取值知識點" class="headerlink" title="使用gorutine取值知識點"></a>使用gorutine取值知識點</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs jsx">package main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br>func <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;<br>c1 := <span class="hljs-title function_">make</span>(chan int,<span class="hljs-number">5</span>)<br><br>go <span class="hljs-title function_">func</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">for</span> <span class="hljs-attr">i</span>:= <span class="hljs-number">0</span> ;i&lt;<span class="hljs-number">10</span>;i++&#123; <br><span class="hljs-comment">//因為有緩衝區所以會先存5個數值到緩衝區滿導致阻塞,超過緩衝區的數字會在管道上等待</span><br>c1 &lt;- i<br>&#125;<br>&#125;()<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>fmt.<span class="hljs-title class_">Println</span>(<span class="language-xml">&lt;-c1) </span><br><span class="language-xml">//將緩衝區內數值印出後發現沒有緩衝區,所以開始往gorutine這個管道裡裡面拿一個放一個</span><br><span class="language-xml">&#125;</span><br><span class="language-xml">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="使用for-range獲取channel值"><a href="#使用for-range獲取channel值" class="headerlink" title="使用for-range獲取channel值"></a>使用for-range獲取channel值</h3><ul><li>一定要記得關閉,否則會panic</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>c1 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span> ,<span class="hljs-number">3</span>)<br>c1 &lt;- <span class="hljs-number">1</span><br>c1 &lt;- <span class="hljs-number">2</span><br>c1 &lt;- <span class="hljs-number">3</span> <br><span class="hljs-built_in">close</span>(c1)<br><span class="hljs-keyword">for</span> v := <span class="hljs-keyword">range</span> c1&#123;<br>fmt.Println(v)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Select用法"><a href="#Select用法" class="headerlink" title="Select用法"></a>Select用法</h3><ul><li>沒有值輸入的情況</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>ch1 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>,<span class="hljs-number">1</span>)<br>ch2 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>,<span class="hljs-number">1</span>)<br>ch3 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>,<span class="hljs-number">1</span>)<br><br><span class="hljs-comment">//只要可執行,就會執行</span><br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-ch1:<br>fmt.Println(<span class="hljs-string">&quot;c1&quot;</span>)<br><span class="hljs-keyword">case</span> &lt;- ch2:<br>fmt.Println(<span class="hljs-string">&quot;c2&quot;</span>)<br><span class="hljs-keyword">case</span> &lt;- ch3:<br>fmt.Println(<span class="hljs-string">&quot;c3&quot;</span>)<br><span class="hljs-keyword">default</span>:<br>fmt.Println(<span class="hljs-string">&quot;none&quot;</span>)<br>&#125;<br><span class="hljs-comment">//輸出都不滿足,因為channel想往外取但裡面沒有值所以無法執行</span><br><span class="hljs-comment">//可以使用select避免程序出現panic</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>三個值輸入的情況</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>ch1 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>,<span class="hljs-number">1</span>)<br>ch2 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>,<span class="hljs-number">1</span>)<br>ch3 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>,<span class="hljs-number">1</span>)<br><br>ch1 &lt;- <span class="hljs-number">1</span><br>ch2 &lt;- <span class="hljs-number">1</span><br>ch3 &lt;- <span class="hljs-number">1</span><br><span class="hljs-comment">//只要可執行,就會執行</span><br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-ch1:<br>fmt.Println(<span class="hljs-string">&quot;c1&quot;</span>)<br><span class="hljs-keyword">case</span> &lt;- ch2:<br>fmt.Println(<span class="hljs-string">&quot;c2&quot;</span>)<br><span class="hljs-keyword">case</span> &lt;- ch3:<br>fmt.Println(<span class="hljs-string">&quot;c3&quot;</span>)<br><span class="hljs-keyword">default</span>:<br>fmt.Println(<span class="hljs-string">&quot;none&quot;</span>)<br>&#125;<br><span class="hljs-comment">//當三個滿足的時候會隨機執行</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="channel相連在不同作用域"><a href="#channel相連在不同作用域" class="headerlink" title="channel相連在不同作用域"></a>channel相連在不同作用域</h3>]]></content>
      
      
      
        <tags>
            
            <tag> golang基礎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GinPackage</title>
      <link href="/2022/12/30/GinPackage/"/>
      <url>/2022/12/30/GinPackage/</url>
      
        <content type="html"><![CDATA[<h1 id="Gin-package"><a href="#Gin-package" class="headerlink" title="Gin package"></a>Gin package</h1><p>http狀態碼不推薦使用數字，使用http.StatusCode</p><ul><li>開始使用Gin</li><li>使用go mod init 包名稱 來初始化go mode</li><li>go get github.com&#x2F;gin-gonic&#x2F;gin</li><li>所有跟請求相關得都能在c *gin.Context裡面找到</li><li>所有跟服務器有關都能再r 裡面找到 → r :&#x3D; gin.Default()</li></ul><h2 id="開始使用Gin"><a href="#開始使用Gin" class="headerlink" title="開始使用Gin"></a>開始使用Gin</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   r := gin.Default()<br>   r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>gin只需要兩行的代碼就能開啟服務器</li><li>使用Run的話gin會預設開啟8080port</li><li>如果沒有連接到會出現404</li></ul><h2 id="基本的GET"><a href="#基本的GET" class="headerlink" title="基本的GET"></a>基本的GET</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   r := gin.Default()<br>   r.GET(<span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span>&#123;<br>      c.JSON(<span class="hljs-number">200</span>, gin.H&#123;<br>         <span class="hljs-string">&quot;status&quot;</span>:<span class="hljs-string">&quot;success&quot;</span>,<br>      &#125;)<br>   &#125;)<br>   r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="基本的POST"><a href="#基本的POST" class="headerlink" title="基本的POST"></a>基本的POST</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">r.POST(<span class="hljs-string">&quot;/ping/:id&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>   id := gin.Param&#123;&#125;<br>   c.JSON(<span class="hljs-number">200</span>,gin.H&#123;<br>      <span class="hljs-string">&quot;status&quot;</span>:<span class="hljs-string">&quot;success&quot;</span>,<br>      <span class="hljs-string">&quot;id&quot;</span>:id,<br>   &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><p>使用Param獲得單一網址的參數,在這個程式中獲得id</p><h1 id="Query-string"><a href="#Query-string" class="headerlink" title="Query string"></a>Query string</h1><h2 id="獲取query-string-參數"><a href="#獲取query-string-參數" class="headerlink" title="獲取query string 參數"></a>獲取query string 參數</h2><h1 id="什麼是query-string"><a href="#什麼是query-string" class="headerlink" title="什麼是query string?"></a>什麼是query string?</h1><ul><li><p>當你使用瀏覽器將數值輸入進輸入框中，url所呈現出的樣子。</p></li><li><p>使用以下圖片說明的話，q&#x3D;後就得字串就是queryString</p></li><li><p>GET請求 ? 後面的就是queryString參數</p></li><li><p>key&#x3D;value的格式，多個key-value格式用 &amp; 串接</p><p>ex: &#x2F;web&#x2F;query&#x3D;peter &amp; age&#x3D;18</p></li></ul><h2 id="使用golang實現query-string"><a href="#使用golang實現query-string" class="headerlink" title="使用golang實現query string"></a>使用golang實現query string</h2><p>1.使用c.Query</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go">packagemain<br><br><span class="hljs-keyword">import</span><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br><br>funcmain() &#123;<br>   r := gin.Default()<br><br>   r.GET(<span class="hljs-string">&quot;/user&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span>&#123;<br>      name := c.Query(<span class="hljs-string">&quot;query&quot;</span>)<span class="hljs-comment">//透過Query獲得請求中攜帶的queryString參數</span><br>      c.JSON(<span class="hljs-number">200</span>, gin.H&#123;<br>         <span class="hljs-string">&quot;name&quot;</span>:name,<br>      &#125;)<br>   &#125;)<br><br>   r.Run()<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="peter便為自訂義的query-string"><a href="#peter便為自訂義的query-string" class="headerlink" title="peter便為自訂義的query string"></a>peter便為自訂義的query string</h3><p>2.使用DefaultQuery函數來設定默認值</p><h3 id="c-DefaultQuery-請求標頭，和Query的參數一樣-當請求標頭參數為空值時顯示默認值"><a href="#c-DefaultQuery-請求標頭，和Query的參數一樣-當請求標頭參數為空值時顯示默認值" class="headerlink" title="c.DefaultQuery(請求標頭，和Query的參數一樣,當請求標頭參數為空值時顯示默認值)"></a><code>c.DefaultQuery(請求標頭，和Query的參數一樣,當請求標頭參數為空值時顯示默認值)</code></h3><p>3.使用GetQuery來判斷是否有傳遞參數(Query string)</p><h3 id="name-ok-c-GetQuery-quot-和Query參數一樣-quot"><a href="#name-ok-c-GetQuery-quot-和Query參數一樣-quot" class="headerlink" title="name ,ok := c.GetQuery(&quot;和Query參數一樣&quot;)"></a><code>name ,ok := c.GetQuery(&quot;和Query參數一樣&quot;)</code></h3><h3 id="使用GetQuery返回值中的bool來認定是否有傳遞參數-判斷方法-gt-使用-ok"><a href="#使用GetQuery返回值中的bool來認定是否有傳遞參數-判斷方法-gt-使用-ok" class="headerlink" title="使用GetQuery返回值中的bool來認定是否有傳遞參數(判斷方法-&gt;使用!ok)"></a>使用GetQuery返回值中的bool來認定是否有傳遞參數(判斷方法-&gt;使用!ok)</h3><h1 id="Form-參數"><a href="#Form-參數" class="headerlink" title="Form 參數"></a>Form 參數</h1><h3 id="使用c-PostForm時，postman要設定在form-data中，key就是PostForm的參數"><a href="#使用c-PostForm時，postman要設定在form-data中，key就是PostForm的參數" class="headerlink" title="使用c.PostForm時，postman要設定在form-data中，key就是PostForm的參數"></a>使用c.PostForm時，postman要設定在form-data中，key就是PostForm的參數</h3><h2 id="一次請求對應一個響應-GET，POST…"><a href="#一次請求對應一個響應-GET，POST…" class="headerlink" title="一次請求對應一個響應(GET，POST…)"></a>一次請求對應一個響應(GET，POST…)</h2><h2 id="請求地址可以相同，方法可以不同"><a href="#請求地址可以相同，方法可以不同" class="headerlink" title="請求地址可以相同，方法可以不同"></a>請求地址可以相同，方法可以不同</h2><p>1.使用模板語法來創造發出請求的前端表單</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><span class="hljs-keyword">import</span>(<br>   <span class="hljs-string">&quot;net/http&quot;</span><br><br>   <span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br>funcmain() &#123;<br>   r := gin.Default()<br>   r.LoadHTMLFiles(<span class="hljs-string">&quot;login.html&quot;</span>) <br><br>r.GET(<span class="hljs-string">&quot;/login&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span>  &#123;<br>      c.HTML(http.StatusOK,<span class="hljs-string">&quot;login.html&quot;</span>,<span class="hljs-literal">nil</span>)<br>   &#125;)<br>   r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>c.HTML可以在用戶訪問指定的url時渲染出指定的html文件</li><li>r.LoadHTMLFiles可以讓用戶加載出自身所指定的html文件</li></ul><p>2.前端表單如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/login&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span>Username:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span>Password:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Login&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>使用html中form的action來決定傳遞的ur需要使用</li><li>Method則是傳遞的方法</li><li>在form表單中需要使用type為submit的按鈕來傳送請求</li></ul><p>3.接收前端POST請求的後端代碼</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go">r.POST(<span class="hljs-string">&quot;/login&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>username := c.Request.FormValue(<span class="hljs-string">&quot;username&quot;</span>)<br>password := c.Request.FormValue(<span class="hljs-string">&quot;password&quot;</span>)<br>c.JSON(<span class="hljs-number">200</span>,gin.H&#123;<br><span class="hljs-string">&quot;username:&quot;</span>:username,<br><span class="hljs-string">&quot;password:&quot;</span>:password,<br>&#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><ul><li>獲取input內容值的方法</li></ul><ol><li>使用c.Request.FormValue(”input的名稱”)</li><li>使用c.PostForm(”input的名稱”) →取道返回值，取不到返回空字符串</li><li>使用GetPostForm(“input的名稱”)來判斷使用者是否有輸入值</li></ol><h1 id="獲取URI參數-Path"><a href="#獲取URI參數-Path" class="headerlink" title="獲取URI參數(Path"></a>獲取URI參數(Path</h1><h2 id="避免匹配重複url"><a href="#避免匹配重複url" class="headerlink" title="避免匹配重複url"></a>避免匹配重複url</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">r.GET(<span class="hljs-string">&quot;/:name/:age&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;&#125;)<br>r.GET(<span class="hljs-string">&quot;/blog/:month/:year&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;&#125;)<br></code></pre></td></tr></table></figure><p>此時的&#x2F;:name&#x2F;:age 會和 &#x2F;:month&#x2F;:year 有衝突</p><ul><li>解決方法為設定不同根目錄</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">r.GET(<span class="hljs-string">&quot;/user/:name/:age&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span>&#123;&#125;)<br>r.GET(<span class="hljs-string">&quot;/blog/:month/:year&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;&#125;)<br></code></pre></td></tr></table></figure><p>獲得URI參數</p><ul><li>使用c.Param來獲的路徑參數內容→返回的皆為string類型</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go">packag emain<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br><br>funcmain() &#123;<br>   r := gin.Default()<br>   r.GET(<span class="hljs-string">&quot;/:name/:age&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br><span class="hljs-comment">//獲取URI參數</span><br>name := c.Param(<span class="hljs-string">&quot;name&quot;</span>)<br>      age := c.Param(<span class="hljs-string">&quot;age&quot;</span>)<br><br>      c.JSON(<span class="hljs-number">200</span>,gin.H&#123;<br>         <span class="hljs-string">&quot;name&quot;</span>: name,<br>         <span class="hljs-string">&quot;age&quot;</span>: age,<br>      &#125;)<br>   &#125;)<br>   r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="參數綁定"><a href="#參數綁定" class="headerlink" title="參數綁定"></a>參數綁定</h1><ul><li><p>可以藉由結構體Struct來傳遞多個參數內容</p><p>但是不能每一次都使用Query或其他必須設定多預設的方法</p><p>否則會造成程式碼繁雜且凌亂</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">username := c.Query(<span class="hljs-string">&quot;username&quot;</span>)<br>password := c.Query(<span class="hljs-string">&quot;password&quot;</span>)<br><br>u := UserInfo&#123;username: username, password: password&#125;<br></code></pre></td></tr></table></figure></li><li><p>因此使用到 c.ShouldBind這個函數來幫忙設定</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span>(<br>   <span class="hljs-string">&quot;fmt&quot;</span><br>   <span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br>typeUserInfostruct&#123;<br>   Username <span class="hljs-type">string</span>  <span class="hljs-string">`form:&quot;username&quot;`</span><br>   Password <span class="hljs-type">string</span>  <span class="hljs-string">`form:&quot;password&quot;`</span><br>&#125;<br><br>funcmain() &#123;<br>   r := gin.Default()<br> <span class="hljs-keyword">var</span> u UserInfo <span class="hljs-comment">//初始化結構體</span><br>   r.GET(<span class="hljs-string">&quot;/user&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>      err := c.ShouldBind(&amp;u)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>         c.JSON(<span class="hljs-number">400</span>,gin.H&#123;<br>            <span class="hljs-string">&quot;error&quot;</span> : err.Error(),<br>         &#125;)<br>      &#125;<span class="hljs-keyword">else</span>&#123;<br>         fmt.Printf(<span class="hljs-string">&quot;%#v\n&quot;</span>,u)<br>         c.JSON(<span class="hljs-number">200</span>,gin.H&#123;<br>            <span class="hljs-string">&quot;status&quot;</span> : <span class="hljs-string">&quot;ok&quot;</span>,<br>         &#125;)<br>      &#125;<br>   &#125;)<br>   r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>因為SholudBind這個函數必須要改到Struct裡面的內容</p><p>所以必須傳遞位址而非單純的值</p></li><li><p>Go語言中的函數都會是改動原先結構體複製出來的位置址的內容而非自己本身</p></li><li><p>ShouldBind之所以能夠知道你所傳遞的值是使用”反射”這個方法</p></li><li><p>ShouldBind會跑去接構體中一個個找</p></li><li><p>如果結構體有json標籤可以使用BindJson來獲得傳入的值</p></li></ul><p>使用tag來綁定結構體(tag可以依照使用者自行設定</p><p><strong>常用的結構體tag</strong></p><ul><li><strong>json →</strong>json序列化或反序列化时字段的名称→使用post時，參數值的名稱必須和tag一樣</li><li><strong>db →</strong>sql模块中对应的数据库字段名</li><li><strong>form →</strong>gin框架中对应的前端的数据字段名 →input中的name</li><li><strong>binding →</strong>搭配 form 使用, 默认如果没查找到结构体中的某个字段则不报错值为空, binding为 required 代表没找到返回错误给前端</li></ul><p>使用json格式(最常用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go">r.POST(<span class="hljs-string">&quot;/json&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>err := c.ShouldBind(&amp;u)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>c.JSON(<span class="hljs-number">400</span>,gin.H&#123;<br><span class="hljs-string">&quot;error&quot;</span> : err.Error(),<br>&#125;)<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>fmt.Printf(<span class="hljs-string">&quot;%#v\n&quot;</span>,u)<br>c.JSON(<span class="hljs-number">200</span>,gin.H&#123;<br><span class="hljs-string">&quot;username&quot;</span>:u.Username,<br><span class="hljs-string">&quot;password&quot;</span>:u.Password,<br>&#125;)<br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><ul><li>需要將Struct設定json這個tag，否則會不知道你傳入甚麼</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><br><span class="hljs-keyword">type</span> UserInfo <span class="hljs-keyword">struct</span>&#123;<br>Username <span class="hljs-type">string</span>  <span class="hljs-string">`form:&quot;username&quot; json:&quot;username&quot;`</span><br>Password <span class="hljs-type">string</span>  <span class="hljs-string">`form:&quot;password&quot; json:&quot;password&quot;`</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="接著使用vscode內建得Thunder-Client來測試"><a href="#接著使用vscode內建得Thunder-Client來測試" class="headerlink" title="接著使用vscode內建得Thunder Client來測試"></a>接著使用vscode內建得Thunder Client來測試</h3><h2 id="shouldBind會按照以下方式來進行綁定"><a href="#shouldBind會按照以下方式來進行綁定" class="headerlink" title="shouldBind會按照以下方式來進行綁定"></a>shouldBind會按照以下方式來進行綁定</h2><h3 id="1-GET請求-→-只是用Form綁定引擎-Query"><a href="#1-GET請求-→-只是用Form綁定引擎-Query" class="headerlink" title="1.GET請求 → 只是用Form綁定引擎(Query"></a>1.GET請求 → 只是用Form綁定引擎(Query</h3><h3 id="2-POST請求→檢查content-type中是否為json再使用Form-form-data"><a href="#2-POST請求→檢查content-type中是否為json再使用Form-form-data" class="headerlink" title="2.POST請求→檢查content-type中是否為json再使用Form(form-data)"></a>2.POST請求→檢查content-type中是否為json再使用Form(form-data)</h3><h1 id="文件上傳"><a href="#文件上傳" class="headerlink" title="文件上傳"></a>文件上傳</h1><ul><li><p>前端代碼</p></li><li><p>form必須設定enctype&#x3D;”multipart&#x2F;form-data</p><p>因為其中一個input的type是file類型</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/upload&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;f1&quot;</span> &gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Upload&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>後端代碼</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span>(<br>   <span class="hljs-string">&quot;path&quot;</span><br><br>   <span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br>funcmain() &#123;<br>   r := gin.Default()<br>   r.LoadHTMLFiles(<span class="hljs-string">&quot;index.html&quot;</span>)<br><br>   r.GET(<span class="hljs-string">&quot;/index&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span>  &#123;<br>      c.HTML(<span class="hljs-number">200</span>,<span class="hljs-string">&quot;index.html&quot;</span>,<span class="hljs-literal">nil</span>)<br>   &#125;)<br><br>   r.POST(<span class="hljs-string">&quot;/upload&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span>&#123;<br><span class="hljs-comment">//讀取文件</span><br>f,err := c.FormFile(<span class="hljs-string">&quot;f1&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>         c.JSON(<span class="hljs-number">400</span>,gin.H&#123;<br>            <span class="hljs-string">&quot;err&quot;</span>:err.Error(),<br>         &#125;)<br>      &#125;<br><span class="hljs-comment">//保存文件</span><br>dst := path.Join(<span class="hljs-string">&quot;./&quot;</span>,f.Filename)<br>      c.SaveUploadedFile(f,dst)<br>   &#125;)<br>   r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>使用c.FormFile讀取前端上傳文件的name</li><li>使用path包中的Join來串接保存文件的地址</li><li>使用SaveUploadedFile來保存文件到本地，第一個參數為文件，第二個是文件儲存得位址</li><li>可以使用r.MaxMultipartMemory來設定最大上傳byte數(默認最大32MB</li></ul><h1 id="請求重定向"><a href="#請求重定向" class="headerlink" title="請求重定向"></a>請求重定向</h1><ul><li>常見用法</li></ul><ol><li>購物中心的註冊，尚未註冊時跳轉到註冊畫面</li><li>網站的404跳轉</li></ol><h3 id="1-使用c-Redirect重新定向"><a href="#1-使用c-Redirect重新定向" class="headerlink" title="1.使用c.Redirect重新定向"></a>1.使用c.Redirect重新定向</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">c.Redirect(http.StatusMovedPermanently,<span class="hljs-string">&quot;https://www.google.com&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>第一個參數為http狀態碼 ⇒301→”StatusMovedPermanently”</li><li>第二個參數是重定向後的位置</li></ul><h3 id="2-使用各自router重新定向"><a href="#2-使用各自router重新定向" class="headerlink" title="2.使用各自router重新定向"></a>2.使用各自router重新定向</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go">    r.GET(<span class="hljs-string">&quot;/a&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>      c.Request.URL.Path = <span class="hljs-string">&quot;/b&quot;</span><br>      r.HandleContext(c)<br>   &#125;)<br>   r.GET(<span class="hljs-string">&quot;/b&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>      c.JSON(<span class="hljs-number">200</span>,gin.H&#123;<br>      <span class="hljs-string">&quot;status&quot;</span>:<span class="hljs-string">&quot;This is b&quot;</span>,<br>   &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><ul><li>使用c.Request.URL.Path &#x3D; “要跳轉的網頁網址” ⇒把請求的URI修改</li><li>r.HandleContext重新定向 ⇒繼續後續的處理</li></ul><h1 id="Router"><a href="#Router" class="headerlink" title="Router"></a>Router</h1><ul><li><p>主要的方式有(可以使用Any代表所有方法</p><ol><li>查詢 →GET</li><li>註冊 →POST</li><li>更新 →PUT</li><li>刪除  →Delete</li></ol></li><li><p>盡量用別人定義好的常量 Ex:寫http.StateOK 會比 直接寫 200還要更好</p></li><li><p>Any方法→大集合(懶再用此方法</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">r.Any(<span class="hljs-string">&quot;/user&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br><span class="hljs-keyword">switch</span> c.Request.Method&#123;<br><span class="hljs-keyword">case</span> http.MethodGet: c.JSON(http.StatusOK,gin.H&#123;<span class="hljs-string">&quot;method&quot;</span>: <span class="hljs-string">&quot;GET&quot;</span>&#125;)<br><span class="hljs-keyword">case</span> http.MethodPost: c.JSON(http.StatusOK,gin.H&#123;<span class="hljs-string">&quot;method&quot;</span>: <span class="hljs-string">&quot;POST&quot;</span>&#125;)<br><span class="hljs-keyword">case</span> http.MethodPut: c.JSON(http.StatusOK,gin.H&#123;<span class="hljs-string">&quot;method&quot;</span>: <span class="hljs-string">&quot;PUT&quot;</span>&#125;)<br><span class="hljs-keyword">case</span> http.MethodDelete: c.JSON(http.StatusOK,gin.H&#123;<span class="hljs-string">&quot;method&quot;</span>: <span class="hljs-string">&quot;DELETE&quot;</span>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>當用戶輸入錯誤的網址or路由時，避免返回到默認的404</p><ul><li>使用r.NotRoute來避免發生此問題</li><li>當用戶對不吋在的URL發送請求時由此函數進行處理</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">r.NoRoute(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.JSON(<span class="hljs-number">200</span>,gin.H&#123;<span class="hljs-string">&quot;method&quot;</span>: <span class="hljs-string">&quot;NORouter&quot;</span>&#125;)<br>&#125;)<br><br></code></pre></td></tr></table></figure><ul><li>使用Group避免產生過多重複</li><li>路由組多用來區分不同的業務線獲API版本</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go">UserGroup := r.Group(<span class="hljs-string">&quot;/user&quot;</span>)<br>&#123;<br>UserGroup.GET(<span class="hljs-string">&quot;/index&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span>&#123;c.JSON(http.StatusOK,<br>gin.H&#123;<span class="hljs-string">&quot;status&quot;</span>:<span class="hljs-string">&quot;get&quot;</span>&#125;)&#125;)<br>UserGroup.POST(<span class="hljs-string">&quot;/index&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span>&#123;c.JSON(http.StatusOK,<br>gin.H&#123;<span class="hljs-string">&quot;status&quot;</span>:<span class="hljs-string">&quot;post&quot;</span>&#125;)&#125;)<br>UserGroup.PUT(<span class="hljs-string">&quot;/index&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span>&#123;c.JSON(http.StatusOK,<br>gin.H&#123;<span class="hljs-string">&quot;status&quot;</span>:<span class="hljs-string">&quot;put&quot;</span>&#125;)&#125;)<br>UserGroup.DELETE(<span class="hljs-string">&quot;/index&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span>&#123;c.JSON(http.StatusOK,<br>gin.H&#123;<span class="hljs-string">&quot;status&quot;</span>:<span class="hljs-string">&quot;delete&quot;</span>&#125;)&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>r.Group把公用的前綴提取出來，創建一個路由組</p></li><li><p>Gin中的Router支持Group嵌套</p></li></ul><h1 id="中間件middleware"><a href="#中間件middleware" class="headerlink" title="中間件middleware"></a>中間件middleware</h1><ul><li><p>中間件用來處理送出請求後發生的重複函數</p></li><li><p>Gin的中間件必須是gin.HandleFunc類型</p><p>→ gin.HandleFunc類型代表函數參數為c *gin.Context</p></li><li><p>全部，單個，甚至是Group都可以設置中間件</p></li></ul><h3 id="設定中間件"><a href="#設定中間件" class="headerlink" title="設定中間件"></a>設定中間件</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span>(<br>   <span class="hljs-string">&quot;fmt&quot;</span><br>   <span class="hljs-string">&quot;net/http&quot;</span><br>   <span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">indexFunc</span> <span class="hljs-params">(c *gin.Context)</span></span>&#123;<br>   fmt.Println(<span class="hljs-string">&quot;indexFunc&quot;</span>)<br>   c.JSON(http.StatusOK,gin.H&#123;<br>      <span class="hljs-string">&quot;status&quot;</span> : <span class="hljs-string">&quot;success&quot;</span>,<br>   &#125;)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">m1</span><span class="hljs-params">(c *gin.Context)</span></span>&#123;fmt.Println(<span class="hljs-string">&quot;m1&quot;</span>)&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   r := gin.Default()<br>   r.GET(<span class="hljs-string">&quot;/index&quot;</span>,m1,indexFunc)<br>   r.Run(<span class="hljs-string">&quot;:9090&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>由於GET方法第二個參數可以傳入多個HandleFunc</p><p>所以由最先傳入的參數開始處理，因此會先執行m1再接著執行indexFunc</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">*<span class="hljs-function"><span class="hljs-keyword">func</span>* <span class="hljs-params">(group *RouterGroup)</span></span> GET(relativePath <span class="hljs-type">string</span>, handlers ...HandlerFunc)<br></code></pre></td></tr></table></figure><h3 id="為m1新增計時的功能"><a href="#為m1新增計時的功能" class="headerlink" title="為m1新增計時的功能"></a>為m1新增計時的功能</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">m1</span><span class="hljs-params">(c *gin.Context)</span></span>&#123;<br>fmt.Println(<span class="hljs-string">&quot;m1&quot;</span>)<br><br>start := time.Now()<br>c.Next()<br>cost := time.Since(start)<br>fmt.Printf(<span class="hljs-string">&quot;cost :%v\n&quot;</span>,cost)<br><br>fmt.Println(<span class="hljs-string">&quot;m1 End&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>使用c.Next來處理後續函數，相當於調用indexFunc</p><p>可以使用c.Abort來阻止處理後續函數</p></li><li><p>和前一個範例最大的不同是使用next時會先跑去執行完後續的函數(indexFunc)，再回來執行m1</p></li></ul><h3 id="可以使用r-Use來全局註冊中間件"><a href="#可以使用r-Use來全局註冊中間件" class="headerlink" title="可以使用r.Use來全局註冊中間件"></a>可以使用r.Use來全局註冊中間件</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br>r.Use(m1)<br>r.GET(<span class="hljs-string">&quot;/index&quot;</span>,indexFunc)<br><br>r.GET(<span class="hljs-string">&quot;/shop&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span>&#123;<br>c.JSON(http.StatusOK,gin.H&#123;<br><span class="hljs-string">&quot;status&quot;</span>:<span class="hljs-string">&quot;shop&quot;</span>,<br>&#125;)<br>&#125;)<br>r.GET(<span class="hljs-string">&quot;/user&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span>&#123;<br>c.JSON(http.StatusOK,gin.H&#123;<br><span class="hljs-string">&quot;status&quot;</span>:<span class="hljs-string">&quot;user&quot;</span>,<br>&#125;)<br>&#125;)<br>r.Run(<span class="hljs-string">&quot;:9090&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>因為有使用r.Use(m1)，代表main函數中的方法都有使用到m1這個中間件</p></li><li><p>使用多個中間件時的順序</p></li><li><p>同時使用到Next和Abort時的順序</p></li><li><p>一般中間件會採用閉包的方式</p></li><li><p>因為使用閉包，所以能在返回HandleFunc前處理前置工作</p><p>也可以傳入參數，使用參數來判斷(傳入類型為bool的參數</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">authMiddleware</span><span class="hljs-params">()</span></span>gin.HandlerFunc&#123;<br><span class="hljs-comment">//連接數據庫</span><br><span class="hljs-comment">//其他準備工作</span><br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span>&#123;<br><span class="hljs-comment">//判斷登入</span><br><span class="hljs-comment">// IF登入用戶</span><br><span class="hljs-comment">// Next</span><br>   <span class="hljs-comment">// else</span><br>   <span class="hljs-comment">// Abort</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="為Group設定中間件的第一種方法"><a href="#為Group設定中間件的第一種方法" class="headerlink" title="為Group設定中間件的第一種方法"></a>為Group設定中間件的第一種方法</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">Users := r.Group(<span class="hljs-string">&quot;/userRouter&quot;</span>,authMiddleware(<span class="hljs-literal">true</span>))<br>&#123;<br>   Users.GET(<span class="hljs-string">&quot;/user&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span>&#123;<br>      c.JSON(http.StatusOK,<br>      gin.H&#123;<span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;user&quot;</span>&#125;,<br>   )&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="為Group設定中間件的第二種方法"><a href="#為Group設定中間件的第二種方法" class="headerlink" title="為Group設定中間件的第二種方法"></a>為Group設定中間件的第二種方法</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go">Users := r.Group(<span class="hljs-string">&quot;/userRouter&quot;</span>)<br>   Users.Use(authMiddleware(<span class="hljs-literal">true</span>))<br>   &#123;<br>      Users.GET(<span class="hljs-string">&quot;/user&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span>&#123;<br>      c.JSON(http.StatusOK,<br>      gin.H&#123;<span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;user&quot;</span>&#125;,<br>   )&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>讓中間件能傳入值到後續函數</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">indexFunc</span> <span class="hljs-params">(c *gin.Context)</span></span>&#123;<br>fmt.Println(<span class="hljs-string">&quot;indexFunc&quot;</span>)<br>name,ok := c.Get(<span class="hljs-string">&quot;name&quot;</span>)<br><span class="hljs-keyword">if</span> !ok &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>c.JSON(http.StatusOK,gin.H&#123;<br><span class="hljs-string">&quot;status&quot;</span> : name,<br>&#125;)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">m1</span><span class="hljs-params">(c *gin.Context)</span></span>&#123;<br>   fmt.Println(<span class="hljs-string">&quot;m1&quot;</span>)<br>   start := time.Now()<br>   c.Set(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;peter&quot;</span>)<br>   c.Next()<br>   cost := time.Since(start)<br>   fmt.Printf(<span class="hljs-string">&quot;cost :%v\n&quot;</span>,cost)<br>   fmt.Println(<span class="hljs-string">&quot;m1 End&quot;</span>)<br>&#125;<br>funcmain() &#123;<br>   r := gin.Default()<br>   r.Use(m1)<br>   r.GET(<span class="hljs-string">&quot;/index&quot;</span>,indexFunc)<br><br>   r.Run(<span class="hljs-string">&quot;:9090&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>使用c.Set來設定要傳入的參數和值(”parms”,”value”)</p><p>後續函數可以使用Get來獲得指定參數(必須和Set所設定的parms一樣)的值→Get跨中間件取值</p><p>Get的話會返回一個Bool來判斷是否正確，使用MustGet效果一樣但不會返回bool</p><h3 id="Gin中的默認中間件"><a href="#Gin中的默認中間件" class="headerlink" title="Gin中的默認中間件"></a>Gin中的默認中間件</h3><ol><li><p>gin.Default會默認使用Logger和Recovery中間件</p><ul><li>Logger中間件將Log寫入gin.DefaultWriter</li><li>Recovery中間件會recover所有的panic，如果有panic會返回500響應碼</li></ul><p>如果想要自行定義，可以使用gin.New新建一個沒有任何默認中間件的路由</p></li><li><p>gin中使用goroutine</p><ul><li><p>當在中間件或Handler中啟動新的goroutine</p><p>不能使用c *gin.Context而是需要使用其只讀副本c.Copy</p></li></ul></li></ol></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 後端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>卷積神經網路</title>
      <link href="/2022/12/30/%E5%8D%B7%E7%A9%8D%E7%A5%9E%E7%B6%93%E7%B6%B2%E8%B7%AF/"/>
      <url>/2022/12/30/%E5%8D%B7%E7%A9%8D%E7%A5%9E%E7%B6%93%E7%B6%B2%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="卷積神經網路起源"><a href="#卷積神經網路起源" class="headerlink" title="卷積神經網路起源"></a>卷積神經網路起源</h1><ol><li>卷積神經網路 vs 全聯接神經網路  <figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs gcode">全聯接會將圖片展開成一為向量-&gt;破懷圖片結構<br><br>四大要件<br><span class="hljs-number">1.</span>卷積層<span class="hljs-comment">(Conv Layer)</span><br>  輸入特徵圖+落干卷積核得到這層輸出，下層輸入<br><span class="hljs-number">2.</span>非線性激勵層<span class="hljs-comment">(Non-liner Layer)</span><br>  不使用的話只能達到擬何非線性特徵，而沒達到非線性非類效果<br><br>以上為核心<br><br><span class="hljs-number">3.</span>池化層<span class="hljs-comment">(Pooling Layer)</span>-&gt;有辦法連接卷積層<span class="hljs-comment">(非必要拉出)</span><br>  將維避免全連接層過於高維-&gt;出現過擬何<br><span class="hljs-number">4.</span>輸出層<span class="hljs-comment">(Fully-connect Layer)</span><br>  傳統-&gt;全聯階層<br>  一般來說是為了分類，不只圖像。一個分類層能為圖片像素所分類<span class="hljs-comment">(是否所屬類別)</span>，更能做到檢測及分隔。而非單純給圖像上label<br><br>卷積核一班採用奇數正方形來設計<br></code></pre></td></tr></table></figure></li><li>發展脈絡與意義(比較傳統和卷積)</li></ol><ul><li>全聯階神經網路問題<ul><li>處理圖像不能太大(參數爆炸)</li><li>難以處理圖像不變性(局部不變性)-&gt;壓成一維局部不變性消失</li></ul></li><li>卷經神經網路提出<ul><li>感受野(Receptive Area)</li><li>權值共享</li><li>偏移不變性</li></ul></li></ul><ol><li>一維例子</li></ol><p>  <code>因為卷積層使用權值共享的原因，導致運算量減少，而假設一張圖上有9在任一位置，對於傳統來說每一個特徵都不一樣，而卷積則因為偏移不變性導致收集特徵皆為一樣</code><br>  <img src="/Users/peter/Desktop/1/source/images/img1.png"><br>  2. 二維例子</p><p>  <code>每個Kernal會生成相對的特徵圖或感受野</code><br>![](..&#x2F;..&#x2F;..&#x2F;截圖 2023-01-05 上午1.05.27.png)</p><h1 id="傳統圖像特徵"><a href="#傳統圖像特徵" class="headerlink" title="傳統圖像特徵"></a>傳統圖像特徵</h1><ol><li>SIFT <em>常用</em></li><li>Spin image</li><li>HoG <em>常用</em></li><li>RIFT <em>常用</em></li><li>Textons</li><li>GLOH</li></ol><h1 id="傳統圖像特徵問題"><a href="#傳統圖像特徵問題" class="headerlink" title="傳統圖像特徵問題"></a>傳統圖像特徵問題</h1><ul><li>雖然能capture局部的不變性，但是因為人工設計，無法更好條街自身參數，優化自身任務，不好方便進行併發運算</li></ul><h1 id="卷積神經網路三大結構特性"><a href="#卷積神經網路三大結構特性" class="headerlink" title="卷積神經網路三大結構特性"></a>卷積神經網路三大結構特性</h1><ol><li>局部感受野(Locally Recptive Area)</li><li>權值共享(Shared Weights)</li><li>下採樣(Spatial or Temporal Sub-sampling)&#x3D;&gt;pooling層，減少維度<br>-&gt; 對平移，縮放，扭曲的不變性<br>![](..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;var&#x2F;folders&#x2F;fl&#x2F;17h5krps04n1wlx_l7q1822h0000gn&#x2F;T&#x2F;TemporaryItems&#x2F;NSIRD_screencaptureui_m6t6do&#x2F;截圖 2023-01-05 上午1.14.15.png)<br>深度不可太大-&gt;梯度消失</li></ol><h1 id="卷積神經網路構建"><a href="#卷積神經網路構建" class="headerlink" title="卷積神經網路構建"></a>卷積神經網路構建</h1><ol><li>卷積層(Convolutional Layer)<ol><li>卷積神經網路基本結構<ul><li>可以優先定義好Kernal的size，開始作前項傳播和反向傳播</li></ul></li><li>由多個卷積核組合形成<ul><li>學習的是卷積和內部參數，新圖像一樣使用內部卷積學習</li></ul></li><li>每個卷積核同輸入數據卷積運算，形成新的特徵圖</li><li>多少卷積核生成多少張特徵圖<br>  ![](..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;var&#x2F;folders&#x2F;fl&#x2F;17h5krps04n1wlx_l7q1822h0000gn&#x2F;T&#x2F;TemporaryItems&#x2F;NSIRD_screencaptureui_xWxhjj&#x2F;截圖 2023-01-05 上午1.24.49.png)<br>  ![](..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;var&#x2F;folders&#x2F;fl&#x2F;17h5krps04n1wlx_l7q1822h0000gn&#x2F;T&#x2F;TemporaryItems&#x2F;NSIRD_screencaptureui_MAmYWe&#x2F;截圖 2023-01-05 上午1.28.35.png)<br>  ![](..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;var&#x2F;folders&#x2F;fl&#x2F;17h5krps04n1wlx_l7q1822h0000gn&#x2F;T&#x2F;TemporaryItems&#x2F;NSIRD_screencaptureui_3oTCxf&#x2F;截圖 2023-01-05 上午1.30.24.png) </li><li>卷積核(Convolutional kernel)&#x3D;&gt;也可定義為filter<ul><li>同輸入數據進行計算算的2維(1維，3維)算子</li><li>大小(size)用戶定義，深度輸入數據定義</li><li>卷積核 矩陣 值：卷積神經網路參數</li><li>卷積核初值隨機定義，通過反向傳播更新</li><li>kernal設計大小引響參數，一般使用3*3</li></ul></li><li>卷積核組合方式：卷積層(Conv layer)-特徵圖(feature map)<br>![](..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;var&#x2F;folders&#x2F;fl&#x2F;17h5krps04n1wlx_l7q1822h0000gn&#x2F;T&#x2F;TemporaryItems&#x2F;NSIRD_screencaptureui_Uafl7I&#x2F;截圖 2023-01-05 上午1.38.57.png)<br>m和input data的深度(depth)有關，n卷積和數目匹配和後面輸出匹配，3*3造成邊消失。一般來說n都會比m大&#x3D;&gt;得到更多空間維度小，但更高維的表達。</li><li>卷積核關鍵參數<ul><li>卷積核大小<ol><li>奇偶選擇：一般奇數，滿足對稱性。if偶，無法滿足中心對稱，在離散上產生過多問題</li><li>大小選擇：根據輸入數據，根據圖像特徵</li><li>厚度確定：與輸入數據一致</li><li>覆蓋範圍：根據數入數據，根據圖像特徵</li></ol></li><li>步長(stride)：對輸入特徵圖的掃描間隔，對輸出特徵圖的影響，步長不同對於最後生成特徵圖的尺寸也不同&#x3D;&gt;polling融合在卷積層的關鍵就是步長<br>![](..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;var&#x2F;folders&#x2F;fl&#x2F;17h5krps04n1wlx_l7q1822h0000gn&#x2F;T&#x2F;TemporaryItems&#x2F;NSIRD_screencaptureui_djew3X&#x2F;截圖 2023-01-05 上午1.51.02.png)</li><li>邊界擴充(pad)：在計算卷積的過程中，為了允許邊界上的數據也能作為中心參與卷積用算，將邊界進行假定延伸(輸入7*7且希望輸出特徵圖和輸入尺寸一致時使用)&#x3D;&gt;避免邊界一直減少<br> ![](..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;var&#x2F;folders&#x2F;fl&#x2F;17h5krps04n1wlx_l7q1822h0000gn&#x2F;T&#x2F;TemporaryItems&#x2F;NSIRD_screencaptureui_JgZePn&#x2F;截圖 2023-01-05 上午1.54.44.png)</li><li>卷積核數目(kernal number)：卷積神經網路的寬度，常見參數為(64,128,256)，之所以如此是根據模型的定義，也會讓GPU運行更高效</li></ul></li><li>總結：<ul><li>卷積核是卷積層基本單位</li><li>卷積核數目，卷積運算步長，pad對卷積層輸出影響</li><li>卷積層參數數目計算</li><li>正向&#x2F;反向卷積運算表達式<br>![](..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;var&#x2F;folders&#x2F;fl&#x2F;17h5krps04n1wlx_l7q1822h0000gn&#x2F;T&#x2F;TemporaryItems&#x2F;NSIRD_screencaptureui_Htaiee&#x2F;截圖 2023-01-05 上午2.05.50.png)</li></ul></li></ol></li><li>其他功能層(池話層，非線性激勵層，歸一化層，切分&#x2F;融合層)</li><li>相關推倒</li><li>使用要點</li></ol><h1 id="卷積神經網路應用"><a href="#卷積神經網路應用" class="headerlink" title="卷積神經網路應用"></a>卷積神經網路應用</h1><ul><li>可視化事例與代碼講解(TensorFlow,Pytorch)</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> CNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>從阿拉伯數字辨識能力了解CNN</title>
      <link href="/2022/12/25/%E5%BE%9E%E9%98%BF%E6%8B%89%E4%BC%AF%E6%95%B8%E5%AD%97%E8%BE%A8%E8%AD%98%E8%83%BD%E5%8A%9B%E4%BA%86%E8%A7%A3CNN/"/>
      <url>/2022/12/25/%E5%BE%9E%E9%98%BF%E6%8B%89%E4%BC%AF%E6%95%B8%E5%AD%97%E8%BE%A8%E8%AD%98%E8%83%BD%E5%8A%9B%E4%BA%86%E8%A7%A3CNN/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> CNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>機器學習新手村</title>
      <link href="/2022/12/24/%E6%A9%9F%E5%99%A8%E5%AD%B8%E7%BF%92%E6%96%B0%E6%89%8B%E6%9D%91/"/>
      <url>/2022/12/24/%E6%A9%9F%E5%99%A8%E5%AD%B8%E7%BF%92%E6%96%B0%E6%89%8B%E6%9D%91/</url>
      
        <content type="html"><![CDATA[<h2 id="線性回歸"><a href="#線性回歸" class="headerlink" title="線性回歸"></a>線性回歸</h2><hr><h3 id="回歸問題是什麼"><a href="#回歸問題是什麼" class="headerlink" title="回歸問題是什麼?"></a>回歸問題是什麼?</h3><ol><li>分類問題<ol><li>到銀行借錢，銀行回答會或不會(明確類別)</li></ol></li><li>回歸問題(有監督算法)<ol><li>到銀行借錢，問銀行能借我多少(一定範圍找尋可能值)</li></ol></li></ol><h3 id="線性回歸例子"><a href="#線性回歸例子" class="headerlink" title="線性回歸例子"></a>線性回歸例子</h3><hr><pre><code class="hljs">x1       x2      y      | Y = x1*θ1 + x2θ*2     </code></pre><p>在數據中添加X0恆等1來方便對線性方程轉換為矩陣</p><p>在機器學習中，所有運算皆使用 <strong>矩陣</strong> </p><table><thead><tr><th>工資</th><th>年齡</th><th>額度</th></tr></thead><tbody><tr><td>4000</td><td>25</td><td>20000</td></tr><tr><td>8000</td><td>30</td><td>70000</td></tr><tr><td>5000</td><td>28</td><td>35000</td></tr><tr><td>7500</td><td>33</td><td>55000</td></tr><tr><td>12000</td><td>40</td><td>85000</td></tr></tbody></table><ol><li>一個例子<ol><li>數據：工資和年齡(2個特徵)</li><li>目標：預測銀行帶給我多少錢(標籤)</li><li>考慮：工資和年齡都會影響最終銀行貸款的結果，那麼他們各自有多大的影響呢？(參數)</li></ol></li><li>由上述Y方程式知道求出 <strong>θ(標籤)</strong> 為目標-&gt;求出解決</li><li>數學來了！<ol><li>假設θ1是年齡參數，θ2是工資參數</li><li>擬合平面h(x)&#x3D;<code>θ0*x0+θ1*x1+θ2*x2</code>(θ0是偏值項)</li><li>將h(x)整合成矩陣表達<code>h(x)=∑(i=0-&gt;n)=θ^Tx</code></li></ol></li><li>誤差(使用i代表任意項)<ol><li>真實值和預測值間肯定具有誤差ϵ</li><li>對於每個樣本 <code>y^(i)=θ^T x^(i)+ ϵ^(i)</code></li></ol></li><li>分析誤差</li><li>正向傳播</li><li>反向傳播</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> ML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http</title>
      <link href="/2022/12/23/http/"/>
      <url>/2022/12/23/http/</url>
      
        <content type="html"><![CDATA[<h1 id="TCP-x2F-IP"><a href="#TCP-x2F-IP" class="headerlink" title="TCP&#x2F;IP"></a>TCP&#x2F;IP</h1><h3 id="api→懂原理"><a href="#api→懂原理" class="headerlink" title="api→懂原理"></a>api→懂原理</h3><h3 id="通信-tcp高併發"><a href="#通信-tcp高併發" class="headerlink" title="通信,tcp高併發"></a>通信,tcp高併發</h3><h3 id="分布式-為服務"><a href="#分布式-為服務" class="headerlink" title="分布式,為服務"></a>分布式,為服務</h3><h3 id="微服務⇒RPC⇒內核-socket—→IO-⇒-BIO-NIO-EPOLL"><a href="#微服務⇒RPC⇒內核-socket—→IO-⇒-BIO-NIO-EPOLL" class="headerlink" title="微服務⇒RPC⇒內核(socket—→IO) ⇒ BIO,NIO,EPOLL"></a>微服務⇒RPC⇒內核(socket—→IO) ⇒ BIO,NIO,EPOLL</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs excel">IO 是連結<br><br>消息/請求可不可以複用連結(多路服用單純是狀態=&gt;RW)=&gt;連結不能服用<br><br>根據消息或請求狀態判斷使否有連節<br><br>假設有一個c(client)有兩個線成,如果同時請求一個服務器,因為HTTP是無狀態<br>=&gt;回傳的消息並不知道是客戶端的哪一個線成=&gt;因此連結不得複用<br><br>正確方式：<br>先線程鎖死連結,完成釋放後再將鎖打開,其他線程在進行請求<br></code></pre></td></tr></table></figure><h1 id="OSI七層模型"><a href="#OSI七層模型" class="headerlink" title="OSI七層模型"></a>OSI七層模型</h1><hr><h3 id="從7層參考模型到5層實際模型"><a href="#從7層參考模型到5層實際模型" class="headerlink" title="從7層參考模型到5層實際模型"></a>從7層參考模型到5層實際模型</h3><h3 id="五層模型中的應用層包含7層模型中的"><a href="#五層模型中的應用層包含7層模型中的" class="headerlink" title="五層模型中的應用層包含7層模型中的"></a>五層模型中的應用層包含7層模型中的</h3><ol><li>應用層</li><li>表示層</li><li>會話層</li></ol><h3 id="⇒應用層可以有不同的通信程序-需要個性化"><a href="#⇒應用層可以有不同的通信程序-需要個性化" class="headerlink" title="⇒應用層可以有不同的通信程序,需要個性化"></a>⇒應用層可以有不同的通信程序,需要個性化</h3><h3 id="內核主要圍繞tcp-x2F-ip協議⇒內核中包含的五層模型"><a href="#內核主要圍繞tcp-x2F-ip協議⇒內核中包含的五層模型" class="headerlink" title="內核主要圍繞tcp&#x2F;ip協議⇒內核中包含的五層模型"></a>內核主要圍繞tcp&#x2F;ip協議⇒內核中包含的五層模型</h3><ol><li>傳輸控制層</li><li>網路層</li><li>鏈路層</li></ol><h3 id="⇒內核是無法被更動的"><a href="#⇒內核是無法被更動的" class="headerlink" title="⇒內核是無法被更動的"></a>⇒內核是無法被更動的</h3><p>EX:</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><br><span class="hljs-attribute">nc</span> <span class="hljs-operator">=</span>&gt;保持建立一個連接<br>nc www.google.com <span class="hljs-operator">=</span>&gt;回車後需要 輸入 方法 網址 協議<br><br>GET / HTTP/<span class="hljs-number">1.0</span><br><br>並非每個程序的方法都相同<span class="hljs-operator">=</span>&gt;應用層個性化<br></code></pre></td></tr></table></figure><h3 id="任何協議都會需要內存幫忙"><a href="#任何協議都會需要內存幫忙" class="headerlink" title="任何協議都會需要內存幫忙"></a>任何協議都會需要內存幫忙</h3><p>nc就是掉用傳輸控制層</p><h1 id="什麼是傳輸控制層"><a href="#什麼是傳輸控制層" class="headerlink" title="什麼是傳輸控制層 ?"></a>什麼是傳輸控制層 ?</h1><hr><h3 id="TCP協議和UDP協議都在這層"><a href="#TCP協議和UDP協議都在這層" class="headerlink" title="TCP協議和UDP協議都在這層"></a>TCP協議和UDP協議都在這層</h3><h2 id="解釋tcp"><a href="#解釋tcp" class="headerlink" title="解釋tcp"></a>解釋tcp</h2><p>⇒面相連結的可靠傳輸控制協議</p><p>⇒三次握手</p><h3 id="什麼叫三次握手-（傳輸控制層"><a href="#什麼叫三次握手-（傳輸控制層" class="headerlink" title="什麼叫三次握手?（傳輸控制層"></a>什麼叫三次握手?（傳輸控制層</h3><p>後端先做一個數據包發給對方syn(空的數據包⇒控制</p><p>服務端接受後會發syn+ack</p><p>後端會發給服務端ack</p><p>三次握手後內核會開出內存空間buffer</p><p>後端有,服務端也有</p><p>而所謂的連接就是雙方所開闢的資源的過程⇒有空間就有連結</p><p>站在程序的角度,只能看到內存空間,對空間讀(字節數組)或寫並不明白握手細節</p><h2 id="程序只和內存空間打交道"><a href="#程序只和內存空間打交道" class="headerlink" title="程序只和內存空間打交道"></a>程序只和內存空間打交道</h2><h3 id="程序連結使用socket底層就是內存和tcp三次握手"><a href="#程序連結使用socket底層就是內存和tcp三次握手" class="headerlink" title="程序連結使用socket底層就是內存和tcp三次握手"></a>程序連結使用socket底層就是內存和tcp三次握手</h3><h1 id="socket套接字"><a href="#socket套接字" class="headerlink" title="socket套接字"></a>socket套接字</h1><hr><h3 id="fd-四元組⇒ip-port-客戶端-ip-port-服務端-唯一標示"><a href="#fd-四元組⇒ip-port-客戶端-ip-port-服務端-唯一標示" class="headerlink" title="fd : 四元組⇒ip:port(客戶端) + ip:port(服務端) 唯一標示"></a>fd : 四元組⇒ip:port(客戶端) + ip:port(服務端) 唯一標示</h3><p>程序拿到的是fd(標示幅)</p><p>port(端口號)使用數字來表示數據包,有65535個</p><p>例子：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs excel">IPA(客戶端)⇒啟用app<br><br>IPB(服務端)⇒生成TOCMAT端口號為<span class="hljs-number">80</span><br><br>請問IPA對IPB(TOCMAT)能建立多少socket(連接)<br><br>/--------------------------------------------/<br><br>客戶端具備I<span class="hljs-symbol">PA:1</span> + I<span class="hljs-symbol">PB:80</span><br>服務端具備I<span class="hljs-symbol">PA:1</span> + I<span class="hljs-symbol">PB:80</span><br><br>能改動客戶端的端口號而總數量的端口號有<span class="hljs-number">65536</span><br>因此能夠建立的連結為<span class="hljs-number">6</span>萬多個<br><br>/------------------------------------------/<br><br>若服務器建立好,請問消耗多少端口號=&gt;只有一個<span class="hljs-number">80</span><br><br>如果有一個客戶端想請求超過<span class="hljs-number">6</span>萬多(端口總數)的數量對服務端,請問能否成功<br>=&gt;能,只要客戶端創造出不同的IP就能超過<br><br>/------------------------------------------/<br><br>若服務端再出現一個程序ngi<span class="hljs-symbol">nx:90</span><br>請問能否再開連接(端口已被佔滿)=&gt;能,因為服務端端口號不一樣,能夠區分出唯一性<br>=&gt;socket合法,因此可以再創造<span class="hljs-number">6</span>萬多個連接<br></code></pre></td></tr></table></figure><h3 id="只要不同ip可以創造無限多個socket"><a href="#只要不同ip可以創造無限多個socket" class="headerlink" title="只要不同ip可以創造無限多個socket"></a>只要不同ip可以創造無限多個socket</h3><h3 id="數據傳輸⇒TCP-→-三次握手-→-數據傳輸-需要斷開連接-→-四次分手"><a href="#數據傳輸⇒TCP-→-三次握手-→-數據傳輸-需要斷開連接-→-四次分手" class="headerlink" title="數據傳輸⇒TCP → 三次握手 → 數據傳輸 (需要斷開連接) → 四次分手"></a>數據傳輸⇒TCP → 三次握手 → 數據傳輸 (需要斷開連接) → 四次分手</h3><h1 id="什麼是四次分手"><a href="#什麼是四次分手" class="headerlink" title="什麼是四次分手"></a>什麼是四次分手</h1><hr><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs coq">有一個客戶端和服務端<br>當客戶端傳送了一個fin信號給服務端 =&gt;第一次握手<br>服務端接受後回傳一個fin+ack給客戶端 =&gt;第二次握手<br><br><span class="hljs-keyword">if</span> 在這時候端開連接呢<br> 客戶端的資源放掉後,服務端的資源還是保留=&gt;服務端資源無法找到相對應具備關係的客戶端資源=&gt;無法正常連結<br><br>當服務端主動向客戶端傳送fin信號時 =&gt;達成第三次握手<br>客戶端接受後回傳ack給服務端 =&gt;四次分手<br><br>第三次握手和第四此可以結合在一起<br></code></pre></td></tr></table></figure><h3 id="演示四次分手"><a href="#演示四次分手" class="headerlink" title="演示四次分手"></a>演示四次分手</h3><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs coq">使用tcpdump必須登入root =&gt;輸入su後password輸入root<br>ifconfig =&gt;查看可用網路卡位置<br>tcpdump =&gt;抓包<br>curl =&gt;完成連結且GET後輸出並退出<br><br>EX:<br>tcpdump -nn -i any port <span class="hljs-number">80</span><br><br>開啟另一個窗口<br>curl www.google.com<br></code></pre></td></tr></table></figure><h3 id="三次握手建立通訊"><a href="#三次握手建立通訊" class="headerlink" title="三次握手建立通訊"></a>三次握手建立通訊</h3><p>[S] &#x3D; syn</p><p>[S.] &#x3D; syn+ack</p><p>[.] &#x3D; ack</p><h3 id="數據傳輸"><a href="#數據傳輸" class="headerlink" title="數據傳輸"></a>數據傳輸</h3><p>每一個[P]都會搭一個[.] ⇒不斷出現且length都不一樣代表在拆包</p><h3 id="四次分手取決於協議⇒要不要保持連結"><a href="#四次分手取決於協議⇒要不要保持連結" class="headerlink" title="四次分手取決於協議⇒要不要保持連結"></a>四次分手取決於協議⇒要不要保持連結</h3><h3 id="傳輸控制層完成握手後發送包必須依靠網路層"><a href="#傳輸控制層完成握手後發送包必須依靠網路層" class="headerlink" title="傳輸控制層完成握手後發送包必須依靠網路層"></a>傳輸控制層完成握手後發送包必須依靠網路層</h3><h1 id="網路層⇒走路由表"><a href="#網路層⇒走路由表" class="headerlink" title="網路層⇒走路由表"></a>網路層⇒走路由表</h1><hr><h3 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h3><h3 id="路由-⇒-默認網關⇒數據過來會下一跳⇒到另一個網卡"><a href="#路由-⇒-默認網關⇒數據過來會下一跳⇒到另一個網卡" class="headerlink" title="路由 ⇒ 默認網關⇒數據過來會下一跳⇒到另一個網卡"></a>路由 ⇒ 默認網關⇒數據過來會下一跳⇒到另一個網卡</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">使用netstat -nr查看所有路由<br></code></pre></td></tr></table></figure><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs coq">ping www.google.com =&gt;需要經過網關<br><br>ping <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.2</span> =&gt;不需要網關<br><br>ping的原理:<br>拿到目標ip後到路由表和遮罩進行匹配(<span class="hljs-number">2</span>進位運算) =&gt;遮罩通常為<span class="hljs-number">255.255</span><span class="hljs-number">.255</span><span class="hljs-number">.0</span><br>然後看是否在Destination有相同地址<br><span class="hljs-keyword">if</span> 有 =&gt;到gateway查看<br>如果出現<span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>代表在局域網,不需要網關<br><br></code></pre></td></tr></table></figure><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">arp</span> -a<br><br>查看網路的<span class="hljs-built_in">ip</span>地址所對應到的硬件網卡上的地址<br><br></code></pre></td></tr></table></figure><h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs coq">arp -d <span class="hljs-number">192.168</span><span class="hljs-number">.150</span><span class="hljs-number">.2</span> &amp;&amp; curl www.google:<span class="hljs-number">80</span><br><br>先刪除內核裡的對應地址再進行請求=&gt;curl調用內核建立握手=&gt;發現沒有位置後調用arp協議=&gt;完成三次握手<br><br>監控握手和arp<br>tcpdump -nn -i any port <span class="hljs-number">80</span> or arp<br></code></pre></td></tr></table></figure><h3 id="完成arp協議後再握手"><a href="#完成arp協議後再握手" class="headerlink" title="完成arp協議後再握手"></a>完成arp協議後再握手</h3><h1 id="鏈路層"><a href="#鏈路層" class="headerlink" title="鏈路層"></a>鏈路層</h1><hr><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs coq">有一個客戶和服務端<br>客戶端架了一個路由[路由有自己的mark和地址] =&gt;和客戶端有連線<br>中間有其他運營商或其他路由器<br>最後再到服務端<br><br>主機的時候=&gt;目標ip-&gt;服務器的<br>=&gt;mark地址-&gt;路由器的(下一跳)<br><br>數據包發送給路由器=&gt;和路由表對應(發現不是自己)=&gt;轉發-&gt;mark地址會運營商(ip永遠只向服務端)<br><br>運營商發現無法匹配(將mark轉成下級[服務端]) =&gt;找到服務器<br><br>每跳一次mark都發生變化,ip地址永遠只向服務端<br><br>端到端=&gt;ip<br>節點到節點 =&gt;mark地址<br>-----------------------------<br>數據包中出現兩套ip地址=&gt;隧道技術(vpn)<br><br>中國想訪問其他國家網站在香港架了一個路由<br>數據包背著兩個ip,內網是其他國家網站的ip地址,用外網包裝(外網指向香港的路由<br>所以數據包會先到香港再到其他國家<br><br>外網=&gt;外部人經過端口都能訪問<br>－－－－－－－－－－－－－－－－－－<br>使用DNAT和SNAT可以改變ip地址<br><br>附載均衡器=&gt;轉發<br>有一個server1(能建立<span class="hljs-number">5000</span>連結)和server2(建立<span class="hljs-number">5000</span>)在前面有附載均衡<br>當客戶端傳送資訊會透過附載均衡器分別傳送到server1和server2<br>=&gt;避免高並發<br><br>在附載均衡時,有一個原子性不能被打破<br>lvs(負載均衡服務器)不會和客戶端握手=&gt;類似路由器<br><br>有一個syn=&gt;會發送到lvs轉發的服務端server1<br>server1回傳給客戶端syn+ack<br>客戶端傳ack給服務端=&gt;此時lvs不能轉發給非發出最原始的syn的服務器<br>協議就是約束<br><br></code></pre></td></tr></table></figure><h3 id="Ddos原理"><a href="#Ddos原理" class="headerlink" title="Ddos原理"></a>Ddos原理</h3><p>客戶端透過lvs的約束來讓ack只能傳給指定服務端</p><p>不斷創造(假)客戶端並瘋狂傳送ack導致服務端過載</p><p>當真實訪問服務端的ack發送時就發生請求失敗</p><h1 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h1><hr><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs excel">假設有個本機docker具有非常多容器但需要同時請求一個服務端(容器）<br>此時如果使用握手會造成請求時間過長,速度慢<br>因此在本機內新增一個容器讓其他容器先連結到他再用他連結到服務器<br>=&gt;本機內握手時間短<br>但服務端返回時發現並不知道是哪個客戶端請求=&gt;HTTP無狀態(連結復用,須避免)<br>因此調用RPC讓無狀態變成有狀態(此時服務端需新增一個rpc位置(容器）讓rpc的客戶端請求-&gt;再連結到真實服務端)<br>=&gt;每個請求傳輸前都掛上request id,服務端返回時變知道是哪個客戶端所傳送的了<br></code></pre></td></tr></table></figure><h1 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h1><hr><p>為什麼要學習io?</p><p>io無處不在(tomcat,redis,kafka,nginx),對於性能至關重要</p><p>IO→學習網路通信IO(socket)→BIO NIO 多路複用器</p><p>計算機組成原理</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs excel">按下開機後,第一個程序為內核(硬盤加載進內存)=&gt;內核為程序=&gt;對外管理io設備<br>內核和程序相當於管理層,內核加載網卡後其他程序可以不用手動加載<br><br>開機後,內核加載至內存,cpu執行內核指令後<br>=&gt;內核會把內核所在地址空間至為內核空間,其他空間為用戶空間<br>=&gt;啟動保護模式(用戶空間沒辦法訪問內核空間,但內核空間可以完全訪問用戶空間)=&gt;減少對系統破壞<br><br>但用戶空間的app會用到內核所管理的外部硬件,因此還是需要有辦法訪問內核<br>=&gt;中斷,系統調用<br><br>App產生系統調用而非函數調用,會將函數轉換成系統(調用)=&gt;使用<span class="hljs-built_in">INT</span> <span class="hljs-symbol">x80</span>(軟體中斷)=&gt;訪問內核<br>用戶想要訪問內核都需要調用中斷<br></code></pre></td></tr></table></figure><h3 id="dtruss指令"><a href="#dtruss指令" class="headerlink" title="dtruss指令"></a>dtruss指令</h3><h1 id="http加密"><a href="#http加密" class="headerlink" title="http加密"></a>http加密</h1><p>如果明文傳輸內容容易被獲得</p><p>C為客戶，S為服務，f為加密函數</p><p>使用對稱加密（如果每個都有k就安全，因此單純非對稱加密並不安全)</p><hr><p>f(k,data)&#x3D;x</p><p>f2(k,x)&#x3D;data</p><p>C-&gt;S 傳輸x</p><p>S解密x得data,也能傳輸給Cx</p><p>K只有一個，所有人都用相同K，容易被破解</p><p>非對稱加密（c對s安全，s對c不安全)</p><hr><p>pk所有人都能拿</p><p>sk只有服務端能拿</p><p>C-&gt;S拿pk</p><p>f(pk,data)&#x3D;y</p><p>f(sk,y)&#x3D;data</p><p>f(sk,data)&#x3D;y’-&gt;被拿到pk，被破解</p><p>f(pk,y’)&#x3D;data</p><p>結合兩種加密（產生中間人問題)</p><hr><p>S有pk,sk</p><p>使用非對稱加密達成協商獲得k</p><p>再使用對稱加密使用k交互數據</p><p>C-&gt;S拿pk</p><p>C加密數據y給S</p><p>S解密數據y，並且將y當非對稱加密k</p><p>S通知服務端新的K</p><p>再使用對稱加密k進行數據交互</p><p>看似安全，但可是</p><hr><p>黑客如果攔截pk,sk</p><p>C拿到黑客的pk，黑客像S請求真實pk</p><p>C傳送數據data給黑客加密，再被攔截</p><p>被黑客用自己的sk攔截，再傳ok(使用對稱加密</p><p>黑客像服務端發送數據(藉由pk加密)請求使用對稱加密，服務端傳送ok</p><p>黑客成為C和S的中間人，獲得所有信息</p><p>解決中間人問題</p><hr><p>因為在第一步被黑客介入，不知道公鑰是否正確</p><p>引入CA (檢查公鑰正確性)，CA具有cpk和csk</p><p>先將pk進行加密</p><p>pk&#x3D;&gt;f(csk ,pk)&#x3D;license給S</p><p>C請求license，得到cpk 就能解密</p><p>但C對CA機構拿cpk 有可能被截獲，因此直接將cpk寫死在操作系統C端</p><p>因此C端能直接對license解密，然後協商k 接著對稱加密，交互信息</p><p>保證pk的絕對安全性</p><p>如果此時還有中間人(黑客</p><p>獲取證書的部分是不可能介入的,license不安全，出現警告且無法訪問</p><p>黑客只拿到pk,當C傳輸時無法解密(需要sk</p><p>對稱+非對稱+CA</p><p>協商過程</p><hr><p>訪問百度</p><p>1 C-&gt;S 支持SSL版本,非對稱算法,隨機數1</p><p>2 S-&gt;C 就用SSL版本,對稱算法,隨機數 2,CA證書</p><p>3 C認證證書</p><p>證書認證成功：</p><p>4 C-&gt;S 隨機數3，hash(1,2)&#x3D;xx</p><p>5 S驗證xx&#x3D;&#x3D;hash(1,2)&#x3D;&gt;隨機數1,2,3生成k</p><p>6 S-&gt;C hash(1,2,4)&#x3D;zz</p><p>7 C hash(1,2,4)&#x3D;&#x3D;zz?&#x3D;&gt;隨1,2,3生成k</p><p>5和7的k會相同</p>]]></content>
      
      
      
        <tags>
            
            <tag> 網路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gonlang-im</title>
      <link href="/2022/12/23/gonlang-im/"/>
      <url>/2022/12/23/gonlang-im/</url>
      
        <content type="html"><![CDATA[<h3 id="項目背景"><a href="#項目背景" class="headerlink" title="項目背景"></a>項目背景</h3><ul><li>IM對性能和體驗敏感度高，大廠必備</li></ul><h3 id="你將獲得什麼"><a href="#你將獲得什麼" class="headerlink" title="你將獲得什麼"></a>你將獲得什麼</h3><ul><li>熟悉開發流程，熟悉技術線 gin+gorm+swagger+log auth等中間件，三高性能</li></ul><h3 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h3><ul><li>發送和接收消息，文字 表情 圖片 語音，訪客，點對點，群聊，快捷回覆，撤回，心跳檢測…</li></ul><h3 id="技術線"><a href="#技術線" class="headerlink" title="技術線"></a>技術線</h3><ul><li>前端，後端(websocket,channel&#x2F;goroutine,gin,template,gorm,sql,nosql,mq…)</li></ul><h3 id="系統架構"><a href="#系統架構" class="headerlink" title="系統架構"></a>系統架構</h3><ul><li>四層：前端，接入層，邏輯層，持久層</li></ul><h3 id="系統發送流程"><a href="#系統發送流程" class="headerlink" title="系統發送流程"></a>系統發送流程</h3><ul><li>A &gt;登陸&gt;權鑑&gt;(遊客)&gt;消息類型&gt;(群&#x2F;廣播)&gt;B</li></ul><h4 id="各個包定義"><a href="#各個包定義" class="headerlink" title="各個包定義"></a>各個包定義</h4><ol><li>common-&gt;公用</li><li>config-&gt;環境設定</li><li>models-&gt;用戶資訊…</li><li>router-&gt;整理路由</li><li>service-&gt;業務邏輯</li><li>sql-&gt;數據庫相關操作</li><li>test-&gt;測試程式</li><li>utils-&gt;初始化</li></ol><h2 id="1-引入gorm"><a href="#1-引入gorm" class="headerlink" title="1.引入gorm"></a>1.引入gorm</h2><p><code>&quot;gorm.io/driver/mysql&quot; &quot;gorm.io/gorm&quot;</code></p><ul><li>用戶模塊設計<ul><li>創建modles包user_basic再寫struct<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">package</span> models<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;gorm.io/gorm&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> UserBasic <span class="hljs-keyword">struct</span> &#123;<br>gorm.Model<br>Name          <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;name&quot;`</span><br>Password      <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;password&quot;`</span><br>Phone         <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;phone&quot;`</span><br>Email         <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;email&quot;`</span><br>Identity      <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;identity&quot;`</span>  <span class="hljs-comment">// 唯一標示</span><br>ClientIp      <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;client_ip&quot;`</span> <span class="hljs-comment">//設備</span><br>ClientPort    <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;client_port&quot;`</span><br>LoginTime     time.Time <span class="hljs-string">`json:&quot;login_time&quot;`</span><br>HeartbeatTime time.Time <span class="hljs-string">`json:&quot;heartbeat_time&quot;`</span> <span class="hljs-comment">//心跳時間</span><br>LogOutTime    time.Time <span class="hljs-string">`json:&quot;log_out_time&quot; gorm:&quot;column:login_out_time&quot;`</span> #使用gorm的tag自訂db裡的column<br>IsLogOut      <span class="hljs-type">bool</span>   <span class="hljs-string">`json:&quot;is_log_out&quot;`</span><br>DeviceInfo    <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;device_info&quot;`</span> <span class="hljs-comment">//設備信息</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(table *UserBasic)</span></span> TableName() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;user_basic&quot;</span><br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul></li><li>測試數據正確性，然後測試封裝 <strong>配制類</strong> <em>測試類</em><ul><li>創建test包，編寫test_gorm<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Go">  <span class="hljs-keyword">package</span> main<br><br>    <span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;gin-chat/models&quot;</span><br>    <span class="hljs-string">&quot;gorm.io/driver/mysql&quot;</span><br>    <span class="hljs-string">&quot;gorm.io/gorm&quot;</span><br>    )<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    db, err := gorm.Open(mysql.Open(<span class="hljs-string">&quot;root:peter63674782@tcp(127.0.0.1:3306)/gin-chat?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span>), &amp;gorm.Config&#123;&#125;)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>    <span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;failed to connect database&quot;</span>)<br>    &#125;<br><br><span class="hljs-comment">// 迁移 -&gt; 將struct印射進表</span><br>db.AutoMigrate(&amp;models.UserBasic&#123;&#125;)<br><br><span class="hljs-comment">// Create</span><br>user := &amp;models.UserBasic&#123;&#125;<br>user.Name = <span class="hljs-string">&quot;peter_Lin&quot;</span><br>db.Create(user)<br><br><span class="hljs-comment">// Read</span><br>fmt.Println(db.First(user, <span class="hljs-number">1</span>))<br>db.Model(user).Update(<span class="hljs-string">&quot;PassWord&quot;</span>, <span class="hljs-number">1234</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="2-引入Gin框架"><a href="#2-引入Gin框架" class="headerlink" title="2.引入Gin框架"></a>2.引入Gin框架</h2><p><code>go get github.com/gin-gonic/gin</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs Go">main.<span class="hljs-keyword">go</span><br><br><span class="hljs-keyword">package</span> main<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;gin-chat/router&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := router.Router()<br>r.Run(<span class="hljs-string">&quot;:80&quot;</span>)<br>&#125;<br><br>router/app.<span class="hljs-keyword">go</span><br><br><span class="hljs-keyword">package</span> router<br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;gin-chat/service&quot;</span><br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Router</span><span class="hljs-params">()</span></span> *gin.Engine &#123;<br>r := gin.Default()<br>r.GET(<span class="hljs-string">&quot;/index&quot;</span>, service.GetIndex)<br><span class="hljs-keyword">return</span> r<br>&#125;<br><br>service/index.<span class="hljs-keyword">go</span><br><span class="hljs-keyword">package</span> service<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetIndex</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.JSON(<span class="hljs-number">200</span>, gin.H&#123;<br><span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;success&quot;</span>,<br>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-將數據和請求關聯起來"><a href="#3-將數據和請求關聯起來" class="headerlink" title="3.將數據和請求關聯起來"></a>3.將數據和請求關聯起來</h2><ol><li>在main方法裡面初始化 配置文件 和 數據庫</li></ol><p><code>utils.InitConfig() utils.InitMysql()</code><br>2.在config包裏面新增app.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">mysql:</span><br>  <span class="hljs-attr">dns:</span> <span class="hljs-string">root:peter63674782@tcp(127.0.0.1:3306)/gin-chat?charset=utf8mb4&amp;parseTime=True&amp;loc=Local</span><br></code></pre></td></tr></table></figure><ol start="3"><li>新建utils包裏面的system_init.go<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">package</span> utils<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;github.com/spf13/viper&quot;</span><br><span class="hljs-string">&quot;gorm.io/driver/mysql&quot;</span><br><span class="hljs-string">&quot;gorm.io/gorm&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> DB *gorm.DB<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">InitConfig</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//讀取配置文件</span><br>viper.SetConfigName(<span class="hljs-string">&quot;app&quot;</span>)<br>viper.AddConfigPath(<span class="hljs-string">&quot;config&quot;</span>)<br>err := viper.ReadInConfig()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;config app init ...&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">InitMysql</span><span class="hljs-params">()</span></span> &#123;<br>DB, _ = gorm.Open(mysql.Open(viper.GetString(<span class="hljs-string">&quot;mysql.dns&quot;</span>)), &amp;gorm.Config&#123;&#125;)<br>fmt.Println(<span class="hljs-string">&quot;config mysql&quot;</span>, viper.Get(<span class="hljs-string">&quot;mysql&quot;</span>))<br>&#125;<br></code></pre></td></tr></table></figure></li><li>到user_basic裏面加上<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs GO"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetUserList</span><span class="hljs-params">()</span></span> []*UserBasic &#123;<br>data := <span class="hljs-built_in">make</span>([]*UserBasic, <span class="hljs-number">10</span>)<br>utils.DB.Find(&amp;data)<br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> data &#123;<br>fmt.Println(v)<br>&#125;<br><span class="hljs-keyword">return</span> data<br>&#125;<br></code></pre></td></tr></table></figure></li><li>到service裏面加上userservice<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs GO"><span class="hljs-keyword">package</span> service<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;gin-chat/models&quot;</span><br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetUserList</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>data := <span class="hljs-built_in">make</span>([]*models.UserBasic, <span class="hljs-number">10</span>)<br>data = models.GetUserList()<br>c.JSON(<span class="hljs-number">200</span>, gin.H&#123;<br><span class="hljs-string">&quot;status&quot;</span>: data,<br>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure></li><li>到router包的app.go新增<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Go">r.GET(<span class="hljs-string">&quot;/users&quot;</span>, service.GetUserList)<br></code></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 後端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue+element項目</title>
      <link href="/2022/12/22/vue-element%E9%A0%85%E7%9B%AE/"/>
      <url>/2022/12/22/vue-element%E9%A0%85%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="模訪項目vue-element"><a href="#模訪項目vue-element" class="headerlink" title="模訪項目vue+element"></a>模訪項目vue+element</h2><p><a href="https://blog.csdn.net/u010174083/article/details/119065315?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167170804916800182778140%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167170804916800182778140&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-119065315-null-null.142%5Ev68%5Ewechat_v2,201%5Ev4%5Eadd_ask,213%5Ev2%5Et3_control2&utm_term=vue3.0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98&spm=1018.2226.3001.4187">原文網址</a></p><hr><h4 id="使用vue-cli構建"><a href="#使用vue-cli構建" class="headerlink" title="使用vue-cli構建"></a>使用vue-cli構建</h4><h2 id="在終端輸入vue-create-項目名稱"><a href="#在終端輸入vue-create-項目名稱" class="headerlink" title="在終端輸入vue create [項目名稱]"></a>在終端輸入<br><code>vue create [項目名稱]</code></h2><h4 id="使用vue-cli安裝element-ui"><a href="#使用vue-cli安裝element-ui" class="headerlink" title="使用vue-cli安裝element-ui"></a>使用vue-cli安裝element-ui</h4><p>在終端輸入<br><code>vue add element-plus </code></p><p>項目文件出現的 <em>element-variables.scss</em></p><hr><h4 id="引入http请求框架axios"><a href="#引入http请求框架axios" class="headerlink" title="引入http请求框架axios"></a>引入http请求框架axios</h4><p>在終端輸入</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">npm install axios</span> <span class="hljs-literal">--</span><span class="hljs-comment">legacy</span><span class="hljs-literal">-</span><span class="hljs-comment">peer</span><span class="hljs-literal">-</span><span class="hljs-comment">deps</span> <span class="hljs-literal">--</span><span class="hljs-comment">save</span><br></code></pre></td></tr></table></figure><h2 id="項目初始化"><a href="#項目初始化" class="headerlink" title="項目初始化"></a>項目初始化</h2><pre><code class="hljs">在終端輸入vue ui安裝vue-router , vuex , scss/sass安裝依賴 axios</code></pre><h2 id="setup函數和vue-rouetr設定"><a href="#setup函數和vue-rouetr設定" class="headerlink" title="setup函數和vue-rouetr設定"></a>setup函數和vue-rouetr設定</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo操作</title>
      <link href="/2022/12/21/123/"/>
      <url>/2022/12/21/123/</url>
      
        <content type="html"><![CDATA[<h3 id="hexo-new來新增部落格"><a href="#hexo-new來新增部落格" class="headerlink" title="hexo new來新增部落格"></a>hexo new來新增部落格</h3><h3 id="hexo-g-c創造html欓案"><a href="#hexo-g-c創造html欓案" class="headerlink" title="hexo g -c創造html欓案"></a>hexo g -c創造html欓案</h3><h3 id="hexo-d-將檔案推上github"><a href="#hexo-d-將檔案推上github" class="headerlink" title="hexo d 將檔案推上github"></a>hexo d 將檔案推上github</h3><hr>]]></content>
      
      
      
        <tags>
            
            <tag> 指令 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
